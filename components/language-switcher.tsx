'use client'

import { useState, useEffect } from 'react'
import { Button } from './ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from './ui/dropdown-menu'
import { locales } from '@/i18n/settings'
// import { useTranslations } from 'next-intl'

export function LanguageSwitcher() {
  // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
  const [currentLocale, setCurrentLocale] = useState<string>('ru')

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useEffect –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ window —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  useEffect(() => {
    const path = window.location.pathname
    setCurrentLocale(path.startsWith('/en') ? 'en' : 'ru')
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
  const switchLanguage = (newLocale: string) => {
    if (typeof window === 'undefined') return

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
    const currentPath = window.location.pathname

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –±–µ–∑ –ª–æ–∫–∞–ª–∏
    let pathWithoutLocale = currentPath

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ª–æ–∫–∞–ª–∏ –∏–∑ –ø—É—Ç–∏
    if (currentPath.startsWith('/en')) {
      pathWithoutLocale = currentPath.substring(3) || '/'
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å —Å –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª—å—é
    const newPath = newLocale === 'ru' ? pathWithoutLocale : `/en${pathWithoutLocale}`

    console.log('Switching language:', {
      from: currentLocale,
      to: newLocale,
      currentPath,
      pathWithoutLocale,
      newPath
    })

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—ã–π URL
    window.location.href = newPath
  }

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
  const localeNames: Record<string, string> = {
    ru: '–†—É—Å—Å–∫–∏–π',
    en: 'English',
  }

  // –§–ª–∞–≥–∏ –¥–ª—è —è–∑—ã–∫–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤)
  const localeFlags: Record<string, string> = {
    ru: 'üá∑üá∫',
    en: 'üá¨üáß',
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="sm" className="flex items-center gap-1">
          <span>{localeFlags[currentLocale]}</span>
          <span className="hidden md:inline">{localeNames[currentLocale]}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        {locales.map((l) => (
          <DropdownMenuItem
            key={l}
            onClick={() => switchLanguage(l)}
            className={l === currentLocale ? 'bg-muted font-medium' : ''}
          >
            <span className="mr-2">{localeFlags[l]}</span>
            {localeNames[l]}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
